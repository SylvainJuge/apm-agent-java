/*-
 * #%L
 * Elastic APM Java agent
 * %%
 * Copyright (C) 2018 - 2021 Elastic and contributors
 * %%
 * Licensed to Elasticsearch B.V. under one or more contributor
 * license agreements. See the NOTICE file distributed with
 * this work for additional information regarding copyright
 * ownership. Elasticsearch B.V. licenses this file to you under
 * the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * #L%
 */

import io.opentelemetry.javaagent.extension.instrumentation.InstrumentationModule;
import io.opentelemetry.javaagent.extension.instrumentation.TypeInstrumentation;
import io.opentelemetry.javaagent.instrumentation.api.SafeServiceLoader;
import net.bytebuddy.description.type.TypeDescription;
import org.apache.http.client.HttpClient;
import org.junit.jupiter.api.Test;

import java.util.List;

import static org.assertj.core.api.Assertions.assertThat;


// TODO : remove this class
public class SandboxTest {

    @Test
    void loadInstrumentationModule() {
        // ensure that we have all the dependencies for the Instrumentation Module

        List<InstrumentationModule> list = SafeServiceLoader.load(InstrumentationModule.class, this.getClass().getClassLoader());
        assertThat(list).isNotEmpty();
        assertThat(list).hasSize(1);

        InstrumentationModule im = list.stream().findFirst().get();

        // TODO : find way to enable/disable through configuration
        assertThat(im.isEnabled()).isTrue();

        // TODO : ensure proper ordering when listing them all
        assertThat(im.order()).isEqualTo(0);

        // There is a "main" instrumentation name and optional aliases on a per-version basis
        // which allow to enable/disable each of them individually
        assertThat(im.instrumentationName()).isEqualTo("apache-httpclient");

        // TODO : do we need to have access to other instrumentation names ?
        // - not required for now, but would allow fine-control over enabling/disabling OT instrumentation modules

        // TODO : see how we could use that to automatically load the helper classes
        // in the plugin classloader, those method calls may be generated by MuzzleCodeGenerator
        assertThat(im.getMuzzleHelperClassNames()).isNotEmpty();
        assertThat(im.getMuzzleReferences()).isNotEmpty();
        assertThat(im.getMuzzleContextStoreClasses()).isNotEmpty();
    }

    @Test
    void typeMatcher() {
        TypeDescription.ForLoadedType targetType = new TypeDescription.ForLoadedType(HttpClient.class);

        InstrumentationModule im = SafeServiceLoader.load(InstrumentationModule.class, this.getClass().getClassLoader()).stream().findFirst().get();

        boolean hasMatch = false;
        for (TypeInstrumentation typeInstrumentation : im.typeInstrumentations()) {
            hasMatch = hasMatch || typeInstrumentation.typeMatcher().matches(targetType);
            if (hasMatch) {
                System.out.printf("%s matches %s%n", targetType.getCanonicalName(), typeInstrumentation.typeMatcher());
            }
        }
        assertThat(hasMatch).isTrue();
    }
}
